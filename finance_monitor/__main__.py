#!/usr/bin/env python3
"""
Point d'entr√©e principal du bot de monitoring financier.
G√®re l'initialisation, la planification et l'ex√©cution.
"""

import os
import sys
import logging
import schedule
import time
from datetime import datetime
import argparse

# Configuration du logging
def setup_logging(log_level: str = "INFO"):
    """Configure le syst√®me de logging."""
    # Cr√©er le dossier logs si n√©cessaire
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # Nom du fichier log avec date
    log_file = os.path.join(log_dir, f"finance_monitor_{datetime.now().strftime('%Y%m%d')}.log")
    
    # Configuration
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    logging.basicConfig(
        level=getattr(logging, log_level.upper()),
        format=log_format,
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # Logger principal
    logger = logging.getLogger(__name__)
    logger.info("=" * 60)
    logger.info("üöÄ D√âMARRAGE DU FINANCE MONITOR BOT")
    logger.info("=" * 60)
    
    return logger


def check_environment():
    """V√©rifie que l'environnement est correctement configur√©."""
    logger = logging.getLogger(__name__)
    
    required_vars = [
        'NEWS_API_KEY',
        'EMAIL_USER',
        'EMAIL_PASS',
        'EMAIL_TARGET'
    ]
    
    optional_vars = [
        'SLACK_WEBHOOK',
        'RUN_MODE',
        'LOG_LEVEL'
    ]
    
    missing = []
    
    # V√©rifier les variables requises
    for var in required_vars:
        if not os.environ.get(var):
            missing.append(var)
    
    if missing:
        logger.error(f"‚ùå Variables d'environnement manquantes: {', '.join(missing)}")
        logger.error("Veuillez configurer ces variables avant de lancer le bot.")
        return False
    
    # Afficher les variables optionnelles
    logger.info("üìã Configuration de l'environnement:")
    for var in required_vars + optional_vars:
        value = os.environ.get(var)
        if value:
            # Masquer les valeurs sensibles
            if 'PASS' in var or 'KEY' in var or 'WEBHOOK' in var:
                display_value = value[:4] + "****" + value[-4:] if len(value) > 8 else "****"
            else:
                display_value = value
            logger.info(f"  ‚Ä¢ {var}: {display_value}")
        else:
            logger.info(f"  ‚Ä¢ {var}: Non d√©fini")
    
    return True


def initialize_database():
    """Initialise la base de donn√©es."""
    logger = logging.getLogger(__name__)
    
    try:
        from data.database import init_database
        init_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation base de donn√©es: {e}")
        return False


def load_configuration():
    """Charge et valide la configuration."""
    logger = logging.getLogger(__name__)
    
    try:
        from config import CONFIG
        
        # Compter les actifs
        stocks_count = len(CONFIG.get('stocks', {}))
        crypto_count = len(CONFIG.get('crypto', {}))
        
        logger.info(f"üìä Configuration charg√©e:")
        logger.info(f"  ‚Ä¢ {stocks_count} actions")
        logger.info(f"  ‚Ä¢ {crypto_count} cryptomonnaies")
        logger.info(f"  ‚Ä¢ Email: {'Activ√©' if CONFIG.get('email', {}).get('enabled') else 'D√©sactiv√©'}")
        logger.info(f"  ‚Ä¢ Slack: {'Activ√©' if CONFIG.get('slack', {}).get('enabled') else 'D√©sactiv√©'}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur chargement configuration: {e}")
        return False


def test_connections():
    """Teste les connexions aux services externes."""
    logger = logging.getLogger(__name__)
    logger.info("üîå Test des connexions...")
    
    # Test email
    try:
        from alerts.email import send_email
        send_email(
            "üß™ Test Finance Monitor",
            "Ceci est un email de test.\nSi vous recevez ce message, la configuration email fonctionne !",
            None
        )
        logger.info("‚úÖ Email de test envoy√©")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  Test email √©chou√©: {e}")
    
    # Test API News
    try:
        from data.fetchers import NewsFetcher
        from config import CONFIG
        
        fetcher = NewsFetcher(CONFIG.get('news_api_key'))
        news = fetcher.get_news("bitcoin", language="fr")
        
        if news:
            logger.info(f"‚úÖ API News fonctionnelle ({len(news)} articles trouv√©s)")
        else:
            logger.warning("‚ö†Ô∏è  API News: Aucun article trouv√©")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  Test API News √©chou√©: {e}")
    
    # Test Yahoo Finance
    try:
        from data.fetchers import StockFetcher
        
        fetcher = StockFetcher()
        data = fetcher.get_stock_price("AAPL")
        
        if data:
            logger.info(f"‚úÖ Yahoo Finance fonctionnel (AAPL: ${data['current_price']:.2f})")
        else:
            logger.warning("‚ö†Ô∏è  Yahoo Finance: Pas de donn√©es")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  Test Yahoo Finance √©chou√©: {e}")
    
    # Test CoinGecko
    try:
        from data.fetchers import CryptoFetcher
        
        fetcher = CryptoFetcher()
        data = fetcher.get_all_crypto_prices(['BTC'])
        
        if data and 'BTC' in data:
            price = data['BTC'].get('current_price_eur', 0)
            logger.info(f"‚úÖ CoinGecko fonctionnel (BTC: ‚Ç¨{price:,.2f})")
        else:
            logger.warning("‚ö†Ô∏è  CoinGecko: Pas de donn√©es")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  Test CoinGecko √©chou√©: {e}")


def schedule_tasks():
    """Configure la planification des t√¢ches."""
    logger = logging.getLogger(__name__)
    
    from core.monitor import run_monitoring_cycle
    from core.utils import is_euronext_open
    
    # Mode d'ex√©cution
    run_mode = os.environ.get('RUN_MODE', 'continuous').lower()
    
    if run_mode == 'once':
        # Ex√©cution unique
        logger.info("üîÑ Mode: Ex√©cution unique")
        run_monitoring_cycle()
        return False
    
    else:
        # Mode continu avec planification intelligente
        logger.info("üîÑ Mode: Ex√©cution continue")
        
        # Planification adaptative
        def smart_schedule():
            """Adapte la fr√©quence selon les heures de march√©."""
            # Nettoyer les jobs existants
            schedule.clear()
            
            if is_euronext_open():
                # March√© ouvert: monitoring fr√©quent
                schedule.every(20).minutes.do(run_monitoring_cycle)
                logger.info("üìä March√© ouvert: Monitoring toutes les 20 minutes")
            else:
                # March√© ferm√©: monitoring r√©duit
                schedule.every(60).minutes.do(run_monitoring_cycle)
                logger.info("üåô March√© ferm√©: Monitoring toutes les 60 minutes")
            
            # Toujours replanifier l'adaptation
            schedule.every(4).hours.do(smart_schedule)
        
        # Planification initiale
        smart_schedule()
        
        # Ex√©cution imm√©diate au d√©marrage
        run_monitoring_cycle()
        
        return True


def run_analysis_mode():
    """Mode analyse technique des actifs."""
    logger = logging.getLogger(__name__)
    logger.info("üìà Mode: Analyse technique")
    
    from config import CONFIG
    from analysis.strategy import TradingStrategy
    
    strategy = TradingStrategy()
    analyses = []
    
    # Analyser tous les actifs
    all_symbols = []
    
    # Stocks
    for symbol in CONFIG.get('stocks', {}):
        all_symbols.append((symbol, 'stock'))
    
    # Cryptos
    for symbol in CONFIG.get('crypto', {}):
        all_symbols.append((symbol, 'crypto'))
    
    logger.info(f"Analyse de {len(all_symbols)} actifs...")
    
    for symbol, asset_type in all_symbols:
        try:
            analysis = strategy.analyze_asset(symbol, asset_type)
            analyses.append(analysis)
            
            # Log r√©sum√©
            overall = analysis.get('overall_score', {})
            if overall:
                logger.info(f"  ‚Ä¢ {symbol}: Score {overall['score']:.1f} - {overall.get('signal', 'N/A')}")
        
        except Exception as e:
            logger.error(f"  ‚ùå Erreur analyse {symbol}: {e}")
    
    # G√©n√©rer le rapport
    if analyses:
        report = strategy.generate_strategy_report(analyses)
        
        # Sauvegarder le rapport
        report_file = f"analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        logger.info(f"üìÑ Rapport d'analyse sauvegard√©: {report_file}")
        
        # Optionnel: envoyer par email
        try:
            from alerts.email import send_email
            send_email(
                f"üìä Analyse Technique - {datetime.now().strftime('%d/%m/%Y')}",
                report,
                None
            )
            logger.info("üìß Rapport envoy√© par email")
        except Exception as e:
            logger.warning(f"Impossible d'envoyer le rapport: {e}")


def main():
    """Fonction principale."""
    # Parser les arguments
    parser = argparse.ArgumentParser(description='Bot de monitoring financier')
    parser.add_argument('--mode', choices=['monitor', 'analyze', 'test'], 
                       default='monitor', help='Mode d\'ex√©cution')
    parser.add_argument('--once', action='store_true', 
                       help='Ex√©cuter une seule fois puis quitter')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
                       default=os.environ.get('LOG_LEVEL', 'INFO'),
                       help='Niveau de logging')
    
    args = parser.parse_args()
    
    # Configuration du logging
    logger = setup_logging(args.log_level)
    
    # V√©rification de l'environnement
    if not check_environment():
        sys.exit(1)
    
    # Initialisation de la base de donn√©es
    if not initialize_database():
        sys.exit(1)
    
    # Chargement de la configuration
    if not load_configuration():
        sys.exit(1)
    
    # Mode test
    if args.mode == 'test':
        logger.info("üß™ Mode test des connexions")
        test_connections()
        sys.exit(0)
    
    # Mode analyse
    if args.mode == 'analyze':
        run_analysis_mode()
        sys.exit(0)
    
    # Mode monitoring (par d√©faut)
    logger.info("üíº D√©marrage du monitoring financier")
    
    # Override du mode d'ex√©cution si --once est sp√©cifi√©
    if args.once:
        os.environ['RUN_MODE'] = 'once'
    
    # Test des connexions au premier lancement
    test_connections()
    
    # Planification des t√¢ches
    should_continue = schedule_tasks()
    
    if should_continue:
        # Boucle principale
        logger.info("‚è∞ Planification active. Appuyez sur Ctrl+C pour arr√™ter.")
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # V√©rifier chaque minute
                
        except KeyboardInterrupt:
            logger.info("\nüõë Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            logger.error(f"‚ùå Erreur critique: {e}", exc_info=True)
        finally:
            logger.info("üëã Finance Monitor Bot termin√©")
    else:
        logger.info("‚úÖ Ex√©cution unique termin√©e")


if __name__ == "__main__":
    main()
